// Welcome to Code in Framer
// Get Started: https://www.framer.com/developers/

// import Example from "https://framer.com/m/framer/Example.js@^1.0.0"

// /**
//  * These annotations control how your component sizes
//  * Learn more: https://www.framer.com/developers/components/auto-sizing
//  *
//  * @framerSupportedLayoutWidth auto
//  * @framerSupportedLayoutHeight auto
//  */
import { useState, useEffect, useRef } from "react"

export default function CurrencyConverter(props) {
    const getInitialAmount = () => {
        return 10000
    }

    const [amount, setAmount] = useState<number>(getInitialAmount())
    const [rates, setRates] = useState<{ [key: string]: number }>({})
    const [isLoading, setIsLoading] = useState(true)
    const [isMobile, setIsMobile] = useState(false)
    const [isDropdownOpen, setIsDropdownOpen] = useState(false)
    const [selectedCurrency, setSelectedCurrency] = useState("USD")
    const dropdownRef = useRef<HTMLDivElement>(null)

    const currencies = [
        { code: "USD", flag: "us", name: "USD" },
        { code: "GBP", flag: "gb", name: "GBP" },
        { code: "EUR", flag: "eu", name: "EUR" },
        { code: "CAD", flag: "ca", name: "CAD" },
        { code: "SGD", flag: "sg", name: "SGD" },
        { code: "AUD", flag: "au", name: "AUD" },
        { code: "NZD", flag: "nz", name: "NZD" },
        { code: "JPY", flag: "jp", name: "JPY" },
        { code: "KWD", flag: "kw", name: "KWD" },
        { code: "AED", flag: "ae", name: "AED" },
    ]

    const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const value =
            e.target.value.replace(/[$,]/g, "").replace(/[^0-9.-]+/g, "") || "0"
        if (value.length <= 12) {
            setAmount(parseFloat(value))
        }
    }

    useEffect(() => {
        const fetchRates = async () => {
            try {
                const response = await fetch(
                    "https://7udrjxdbzajtpwodsnnnagxqom0ckvmv.lambda-url.ap-south-1.on.aws/",
                    {
                        method: "GET",
                        headers: {
                            Accept: "application/json",
                        },
                        mode: "cors", // Explicitly set CORS mode
                    }
                )
                const data = await response.json()
                if (data.rates) {
                    setRates(data.rates)
                } else {
                    // Fallback rates if API fails
                    setRates({
                        USD: 0.0115823656,
                        EUR: 0.0106688923,
                        CAD: 0.0165900707,
                        GBP: 0.0089319689,
                        AUD: 0.0183755198,
                        SGD: 0.0154548542,
                        NZD: 0.0201025144,
                        JPY: 1.7214481919,
                        KWD: 0.0035682199,
                        AED: 0.0425434669,
                    })
                }
            } catch (error) {
                console.error("Error fetching exchange rates:", error)
                // Set fallback rates on error
                setRates({
                    USD: 0.0115823656,
                    EUR: 0.0106688923,
                    CAD: 0.0165900707,
                    GBP: 0.0089319689,
                    AUD: 0.0183755198,
                    SGD: 0.0154548542,
                    NZD: 0.0201025144,
                    JPY: 1.7214481919,
                    KWD: 0.0035682199,
                    AED: 0.0425434669,
                })
            } finally {
                setIsLoading(false)
            }
        }
        fetchRates()
    }, [])

    useEffect(() => {
        const resizeObserver = new ResizeObserver((entries) => {
            for (let entry of entries) {
                setIsMobile(entry.contentRect.width <= 768)
            }
        })

        resizeObserver.observe(document.body)
        return () => resizeObserver.disconnect()
    }, [])

    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (
                dropdownRef.current &&
                !dropdownRef.current.contains(event.target as Node)
            ) {
                setIsDropdownOpen(false)
            }
        }

        document.addEventListener("mousedown", handleClickOutside)
        return () => {
            document.removeEventListener("mousedown", handleClickOutside)
        }
    }, [])

    const getCurrencySymbol = (currencyCode: string) => {
        const symbols: { [key: string]: string } = {
            USD: "$",
            EUR: "€",
            GBP: "£",
            JPY: "¥",
            AUD: "A$",
            CAD: "C$",
            SGD: "S$",
            NZD: "NZ$",
            KWD: "KD",
            AED: "د.إ",
        }
        return symbols[currencyCode] || currencyCode
    }

    const formatInUSDIcon = (amount: number) => {
        const formatter = new Intl.NumberFormat("en-US", {
            minimumFractionDigits: 0,
        })

        return `${getCurrencySymbol(selectedCurrency)} ${formatter.format(amount)}`
    }

    const calculateInrAmount = () => {
        if (!rates[selectedCurrency] || !amount) return 0
        // Since 1 INR = 0.0115 USD (from API)
        // To convert 100 USD to INR: 100 * (1/0.0115)
        return amount * (1 / rates[selectedCurrency])
    }

    const convertedAmount = new Intl.NumberFormat("en-IN", {
        style: "currency",
        currency: "INR",
        minimumFractionDigits: 2,
    }).format(calculateInrAmount())

    const currentRate =
        isLoading || !rates[selectedCurrency]
            ? "Loading..."
            : (1 / rates[selectedCurrency]).toFixed(3)

    const styles = {
        container: {
            maxWidth: "1200px",
            padding: "40px 32px",
            background:
                "linear-gradient(135deg, #ffffff 0%, #d8e0ff 45%, #ffd6f3 100%)",
            borderRadius: "12px",
        },
        converterBox: {
            display: "flex",
            flexDirection: isMobile ? ("column" as const) : ("row" as const),
            alignItems: "center",
            gap: "20px",
            width: "100%",
        },
        currencyBox: {
            flex: isMobile ? "1" : "1 1 calc(50% - 32px)",
            width: "100%",
            padding: isMobile ? "12px 10px" : "12px 24px",
            backgroundColor: "#fff",
            borderRadius: "8px",
            overflow: "visible",
            height: "100%",
            position: "relative" as const,
        },
        currencyContent: {
            display: "flex",
            alignItems: "center",
            justifyContent: "space-between",
            marginBottom: "0",
            gap: "10px",
        },
        label: {
            fontSize: "14px",
            color: "#505868",
            marginBottom: "8px",
            letterSpacing: "0.01em",
        },
        currencySelector: {
            display: "flex",
            alignItems: "center",
            gap: "6px",
        },
        flag: {
            width: "28px",
            height: "28px",
            borderRadius: "50%",
            objectFit: "cover" as const,
        },
        currencyCode: {
            fontSize: "20px",
            fontWeight: "600",
            letterSpacing: "0.01em",
        },
        amount: {
            color: "#191B1F",
            fontSize: "20px",
            letterSpacing: "0.01em",
            fontFamily: "Inter, sans-serif !important",
            fontWeight: "600",
            overflow: "hidden",
            textOverflow: "ellipsis",
            whiteSpace: "nowrap",
            flex: "1",
            textAlign: "right" as const,
            minWidth: "0",
        },
        arrow: {
            fontSize: "24px",
            color: "#191B1F",
            transform: isMobile ? "rotate(90deg)" : "none",
        },
        rateInfo: {
            marginTop: "32px",
            letterSpacing: "0.01em",
            paddingLeft: "8px",
            lineHeight: "100%",
        },
        rateContainer: {
            display: "flex",
            alignItems: "center",
            justifyContent: "space-between",
            width: "100%",
           
        },
        rateGroup: {
            display: "flex",
            flexDirection: "column",
            gap: "8px",
        
        },
        rateText: {
            fontSize: "24px",
            fontWeight: "600",
            color: "#191B1F",
        },
        blueNumber: {
            color: "#216afb",
            fontWeight: "600",
        },
        timestamp: {
            fontSize: "16px",
            color: "#666",
            fontWeight: "400",
            marginTop: "4px",
            lineHeight: "1.4",
        },
        // footer: {
        //     display: "flex",
        //     justifyContent: "space-between",
        //     alignItems: "center",
        //     marginTop: "20px",
        //     fontSize: "14px",
        //     fontWeight: "300",
        //     paddingLeft: "8px",
        //     color: "#191B1F",
        // },
        button: {
            // marginBottom: "32px",
            backgroundColor: "#216afb",
            color: "#fff",
            padding: "12px 16px",
            borderRadius: "4px",
            border: "none",
            fontSize: "14px",
            fontFamily: "Inter, sans-serif",
            fontWeight: "400",
            cursor: "pointer",
            transition: "background-color 0.2s",
            "&:hover": {
                backgroundColor: "#4783f9",
            
            },
        },
        amountInput: {
            color: "#191B1F",
            fontSize: "20px",
            fontFamily: "Inter, sans-serif !important",
            fontWeight: "600",
            letterSpacing: "0.01em",
            lineHeight: "100%",
            border: "none",
            outline: "none",
            width: "100%",
            textAlign: "right" as const,
            padding: "0",
            minWidth: "0",
        },
        dropdown: {
            position: "absolute" as const,
            top: "100%",
            left: 0,
            backgroundColor: "#fff",
            borderRadius: "8px",
            boxShadow: "0 4px 12px rgba(0,0,0,0.1)",
            width: "200px",
            zIndex: 1001,
            marginTop: "4px",
            maxHeight: "168px",
            overflowY: "auto" as const,
            scrollbarWidth: "thin" as const,
            scrollbarColor: "#888 #f1f1f1" as const,
            "&::-webkit-scrollbar": {
                width: "8px",
            },
            "&::-webkit-scrollbar-track": {
                background: "#f1f1f1",
                borderRadius: "4px",
            },
            "&::-webkit-scrollbar-thumb": {
                background: "#888",
                borderRadius: "4px",
                "&:hover": {
                    background: "#555",
                },
            },
        },
        dropdownItem: {
            display: "flex",
            alignItems: "center",
            padding: "12px 16px",
            gap: "8px",
            cursor: "pointer",
            height: "56px",
            boxSizing: "border-box" as const,
            "&:hover": {
                backgroundColor: "#f5f5f5",
            },
        },
        searchBox: {
            padding: "12px 16px",
            borderBottom: "1px solid #eee",
        },
        searchInput: {
            width: "100%",
            padding: "8px 12px",
            border: "1px solid #eee",
            borderRadius: "4px",
            outline: "none",
        },
        currencySelectorWithDropdown: {
            position: "relative" as const,
            cursor: "pointer",
            zIndex: 1001,
        },
        arrowIcon: {
            marginLeft: "4px",
            transition: "transform 0.2s ease",
        },
        receiveButton: {
            backgroundColor: "#216afb",
            color: "#fff",
            padding: "12px 24px",
            borderRadius: "5px",
            border: "none",
            fontSize: "16px",
            fontWeight: "500",
            cursor: "pointer",
            whiteSpace: "nowrap",
           
        },
    }

    const handleReceiveMoneyClick = () => {
        window.open("https://dashboard.infinityapp.in/auth/signup", "_blank")
    }

    // For debugging
    console.log({
        amount,
        selectedCurrency,
        rate: rates[selectedCurrency],
        inverseRate: rates[selectedCurrency] ? 1 / rates[selectedCurrency] : 0,
        calculatedAmount: calculateInrAmount(),
    })

    return (
        <div style={styles.container}>
            <div style={styles.converterBox}>
                <div style={styles.currencyBox}>
                    <div style={styles.label}>Amount</div>
                    <div style={styles.currencyContent}>
                        <div
                            style={styles.currencySelectorWithDropdown}
                            onClick={() => setIsDropdownOpen(!isDropdownOpen)}
                            ref={dropdownRef}
                        >
                            <div style={styles.currencySelector}>
                                <img
                                    src={`https://flagcdn.com/w40/${selectedCurrency.toLowerCase() === "eur" ? "eu" : selectedCurrency.substring(0, 2).toLowerCase()}.png`}
                                    alt={`${selectedCurrency} flag`}
                                    style={styles.flag}
                                />
                                <span style={styles.currencyCode}>
                                    {selectedCurrency}
                                </span>
                                <span style={styles.arrowIcon}>▼</span>
                            </div>

                            {isDropdownOpen && (
                                <div style={styles.dropdown}>
                                    {currencies.map((currency) => (
                                        <div
                                            key={currency.code}
                                            style={styles.dropdownItem}
                                            onClick={(e) => {
                                                e.stopPropagation()
                                                setSelectedCurrency(
                                                    currency.code
                                                )
                                                setIsDropdownOpen(false)
                                            }}
                                        >
                                            <img
                                                src={`https://flagcdn.com/w40/${currency.flag}.png`}
                                                alt={`${currency.code} flag`}
                                                style={styles.flag}
                                            />
                                            <span>{currency.name}</span>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>
                        <div style={styles.amount}>
                            <input
                                type="text"
                                value={formatInUSDIcon(amount)}
                                onChange={handleAmountChange}
                                style={styles.amountInput}
                                aria-label={`Amount in ${selectedCurrency}`}
                            />
                        </div>
                    </div>
                </div>

                <div style={styles.arrow}>→</div>

                <div style={styles.currencyBox}>
                    <div style={styles.label}>Converted to</div>
                    <div style={styles.currencyContent}>
                        <div style={styles.currencySelector}>
                            <img
                                src="https://flagcdn.com/w40/in.png"
                                alt="INR flag"
                                style={styles.flag}
                            />
                            <span style={styles.currencyCode}>INR</span>
                        </div>
                        <div style={styles.amount}>
                            {isLoading ? "Loading..." : convertedAmount}
                        </div>
                    </div>
                </div>
            </div>

            <div style={styles.rateInfo}>
                <div style={styles.rateContainer}>
                    <div style={styles.rateGroup}>
                        <div style={styles.rateText}>
                            1 {selectedCurrency} ={" "}
                            <span style={styles.blueNumber}>{currentRate}</span>{" "}
                            INR
                        </div>
                        <div style={styles.timestamp}>
                            Mid market rate as of{" "}
                            {new Date().toLocaleDateString("en-US", {
                                day: "2-digit",
                                month: "short",
                                hour: "2-digit",
                                minute: "2-digit",
                                timeZone: "Asia/Kolkata",
                                hour12: false,
                            })}{" "}
                            IST
                        </div>
                    </div>
                    <button
                        style={styles.receiveButton}
                        onClick={handleReceiveMoneyClick}
                    >
                        Receive money
                    </button>
                </div>
            </div>

            <div style={styles.footer}>
                {/* <div>
                    Receive money at <span style={{ color: "#4285f4" }}>G</span>
                    <span style={{ color: "#ea4335" }}>o</span>
                    <span style={{ color: "#fbbc05" }}>o</span>
                    <span style={{ color: "#4285f4" }}>g</span>
                    <span style={{ color: "#34a853" }}>l</span>
                    <span style={{ color: "#ea4335" }}>e</span> rates with
                    Infinity
                </div> */}
                {/* <button style={styles.receiveButton} onClick={handleReceiveMoneyClick}>
                    Receive money
                </button> */}
            </div>
        </div>
    )
}

// Styles are written in object syntax
// Learn more: https://reactjs.org/docs/dom-elements.html#style
// const containerStyle = {
//     height: "100%",
//     display: "flex",
//     justifyContent: "center",
//     alignItems: "center",
//     overflow: "hidden",
// }
